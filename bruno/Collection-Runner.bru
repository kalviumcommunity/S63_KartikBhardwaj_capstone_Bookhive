meta {
  name: 🚀 Complete API Test Runner
  type: http
  seq: 999
}

get {
  url: {{baseUrl}}/auth/profile
  body: none
  auth: bearer
}

auth:bearer {
  token: {{token}}
}

docs {
  # 🚀 Complete API Test Runner
  
  ## Test Execution Order:
  
  ### Phase 1: Authentication
  1. Run `Auth/01-User-Signup.bru`
  2. Run `Auth/02-User-Login.bru`
  3. Run `Auth/03-Get-User-Profile.bru`
  
  ### Phase 2: Books Management
  4. Run `Books/02-Search-Books-OpenLibrary.bru`
  5. Run `Books/01-Get-All-Books.bru`
  6. Run `Books/03-Add-New-Book.bru`
  7. Run `Books/04-Get-Book-Reviews.bru`
  
  ### Phase 3: Review System
  8. Run `Reviews/02-Create-Review-Request.bru`
  9. Run `Reviews/01-Get-All-Review-Requests.bru`
  
  ### Phase 4: User Features
  10. Run `Users/01-Upload-Profile-Photo.bru` (optional)
  
  ### Phase 5: Contact
  11. Run `Contact/01-Submit-Contact-Form.bru`
  
  ## 🔐 JWT Token Flow:
  - Tokens automatically saved after signup/login
  - All protected routes use stored token
  - No manual token management required
  
  ## 📊 Expected Results:
  - All requests should return 200/201 status codes
  - Environment variables auto-populated
  - Console logs show success messages
}

script:post-response {
  console.log("=" .repeat(50));
  console.log("🚀 BOOKHIVE API COLLECTION TEST RUNNER");
  console.log("=" .repeat(50));
  console.log("📍 Current Environment:", bru.getEnvName());
  console.log("🌐 Base URL:", bru.getEnvVar("baseUrl"));
  console.log("🔑 Token Status:", bru.getEnvVar("token") ? "✅ Available" : "❌ Missing");
  console.log("👤 User ID:", bru.getEnvVar("userId") || "Not set");
  console.log("📚 Book ID:", bru.getEnvVar("bookId") || "Not set");
  console.log("=" .repeat(50));
  console.log("📋 Test execution completed!");
  console.log("=" .repeat(50));
}